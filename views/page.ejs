<!DOCTYPE html>
<html>
	<head>
		<title>Framway - app</title>
		<link href="/framway/build/css/vendor.css" type="text/css" rel="stylesheet">
		<link href="/framway/build/css/framway.css" type="text/css" rel="stylesheet">
		<meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=0">
	</head>
	<body>
		<div id="app" status="no-install" class="p-all-x2 container">
			<div class="app__header">
				<h1 id="app__title">
					<div id="app__status"></div>
					FRAMWAY<span class="ft-grey">/</span>
					<span id="app__statusLabel">Loading...</span>
				</h1>
				<div id="app__actions">
					<!-- <form action="/app/action" method="post"> -->
						<a href="/app/install" data-action="install" data-result="false" data-process="processAction" class="btn-load disabled">Install</a>
						<button name="action" data-action="build" data-result="false" data-process="processAction" class="btn-load disabled">Build</button>
						<button name="action" data-action="delete" data-result="false" data-process="processAction" class="hidden btn-load btn-bd-orange disabled">Delete</button>
						<button name="action" data-action="test" data-result="false" data-process="processAction" class="btn-load btn-bg-green">test</button>
					<!-- </form> -->
				</div>
			</div>
			<form id="app_config" class="d-grid cols-3 cols-md-2 cols-sm-1 m-bottom">
				<div class="block-std">
					<div class="app__header">
						<h2>COMPONENTS</h2>
						<div class="actions">
							<span data-action="updateComponents" data-result="false" data-icon="true" data-text=" " data-process="processAction" title="Update all components"><i class="fad fa-arrow-alt-to-top"></i></span>
						</div>
					</div>
			    	<ul class="app__list sortable" id="app__list--components"></ul>
			    	<p>No component found.</p>
				</div>
				<div class="block-std">
					<div class="app__header">
						<h2>THEMES</h2>
						<div class="actions">
							<span data-action="updateThemes" data-result="false" data-icon="true" data-text=" " data-process="processAction" title="Update all themes"><i class="fad fa-arrow-alt-to-top"></i></span>
						</div>
					</div>
		    		<ul class="app__list sortable" id="app__list--themes"></ul>
		    		<p>No theme found.</p>
				</div>
				<div class="block-std">
					<div class="app__header">
						<h2>OTHERS</h2>
					</div>
		    		<ul class="app__list" id="app__list--others">
		    			<li>
		    				<div class="input-group">
			    				<label for="f_config_useFA">Font Awesome</label>
			    				<select name="f_config_useFA" id="f_config_useFA">
			    					<option value="false">No</option>
			    					<option value="free">Free</option>
			    					<option value="pro">Pro</option>
			    				</select>
		    				</div>
		    			</li>
						<li>
							<div class="input-group">
								<input type="checkbox" name="f_config_useToastr" id="f_config_useToastr">
								<label for="f_config_useToastr">Use Toastr</label>
							</div>
						</li>
						<li>
							<div class="input-group">
								<input type="checkbox" name="f_config_debug" id="f_config_debug">
								<label for="f_config_debug">Debug mode</label>
							</div>
						</li>
						<li></li>
		    		</ul>
		    		<p>No configuration found.</p>
				</div>
			</form>
			<div id="app__message" class="w-100"></div>
		</div>
		<script type="text/javascript" src="/framway/build/js/vendor.js"></script>
		<script type="text/javascript" src="/framway/build/js/framway.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/@shopify/draggable@1.0.0-beta.8/lib/sortable.js"></script>
		<script src="/socket.io/socket.io.js"></script>
		<script>
			var CONFIG = {};
        	var socket = io.connect('localhost:666', {transports: ['websocket']});      

        	// set sortable lists
        	for(var list of document.querySelectorAll('.app__list.sortable')){
	        	var sortable = new Sortable.default(list, {
				    draggable: 'li',
				    handle: '[data-action=move]',
				    mirror: {
				      appendTo: list,
				      constrainDimensions: true,
				      xAxis: false,
				    },
				});
				sortable.on('sortable:stop',function(){
					setTimeout(function(){
	        			checkConfig();
					},10)
				})
        	}
        	// set custom event listening for inputs from interface, checking config correspondance
        	app.addCustomEventListener('.app__list [name]','change',function(){checkConfig();});
        	// enable components/themes actions as btn-load
        	app.addCustomEventListener('.actions [data-process=processAction]:not(.btn-load)','click',function(el){
        		if (!el.classList.contains('ready')) {
        			new app.BtnLoad(el);
        			el.classList.add('ready');
        		}
        	});

        	/**
        	 * update app status and emit action to the server, according the button used
        	 * @param  {BtnLoad object} btn
        	 */
        	var processAction = function(btn){
        		return new Promise(function(resolve,reject){
        			processAction.reject = reject;
        			processAction.resolve = resolve;
        			var action = btn.getData('action',false);
        			var params = null;
        			var strAction = document.getElementById('app__statusLabel').innerHTML;
        			switch(action){
        				case 'build'  : 
        					params = getCurrentConfig(); 
        				break;
        				case 'updateComponent': 
        					params = btn.$el.closest('li').attr('data-component');
        				break;
        				case 'updateTheme': 
        					params = btn.$el.closest('li').attr('data-theme'); 
        				break;
        				case 'install': break;
        				case 'updateComponents': break;
        				case 'updateThemes': break;
        				case 'delete': break;
        				case 'test': break;
        				case false:
        					updateStatus('error','no action provided');
        					throw '';
        				break;
        				default: 
        					updateStatus('error','action inconnue: '+action);
        					throw '';
        				break;
        			}
        			// updateStatus(action,strAction);
	        		socket.emit('action',action,params);
        		});
        	}

        	/**
        	 * check correspondance between original config and the one currently displayed and update app message 
        	 * @return {boolean} true if current config is same as the original
        	 */
        	var checkConfig = function(){
        		var isSame = (JSON.stringify(getCurrentConfig()) === JSON.stringify(CONFIG));
        		document.querySelector('#app__message').innerHTML = '';
        		if (!isSame)
        			document.querySelector('#app__message').innerHTML = 'Current configuration has changed. Use the <u>Build</u> action to save it.';
        		return isSame;
        	}

        	var updateStatus = function(status=false,msg=false){
        		if(status)
        			document.getElementById('app').setAttribute('status',status);
        		if (msg)
        			document.getElementById('app__statusLabel').innerHTML = msg;
        	}

        	/**
        	 * retrieve and return current config according to interface's inputs
        	 * @return {object} 
        	 */
        	var getCurrentConfig = function(){
        		var config = {
        			components: [],
        			themes: [],
        			useFA: document.getElementById('f_config_useFA').value != "false"?document.getElementById('f_config_useFA').value:false,
        			useToastr: document.getElementById('f_config_useToastr').checked,
        			debug: document.getElementById('f_config_debug').checked,
        		};
        		for(var component of document.querySelectorAll('#app__list--components input'))
        			if(component.checked)
        				config.components.push(component.value)
        		for(var theme of document.querySelectorAll('#app__list--themes input'))
        			if(theme.checked)
        				config.themes.push(theme.value)
        		return config;
        	}

        	/**
        	 * listen to events emmited by server
        	 */
        	socket
        	.on('connected',function(){ console.log('### Websocket connected'); })
        	.on('check',function(){ console.log('### checking..'); })
        	.on('reload',function(){ console.log('### reloading'); window.location.reload(); })
        	.on('updateStatus',function(status,msg=false){ 
        		console.log('### updating status..'); 
        		updateStatus(status,msg);
        	})
        	.on('update',function(data){
        		console.log('### updating interface');
        		console.log(data.remote);

        		// HEADER 
        		var strStatus='';
        		switch(data.status){
        			case 'ok': 
        				strStatus = data.framway.version;
        				document.querySelector('#app__actions .btn-load[data-action=install]').classList.add('disabled');
        				document.querySelector('#app__actions .btn-load[data-action=build]').classList.remove('disabled');
        				document.querySelector('#app__actions .btn-load[data-action=delete]').classList.remove('disabled');
        			break;
        			case 'no-build': 
        				strStatus = 'not builded';
        				document.querySelector('#app__actions .btn-load[data-action=install]').classList.add('disabled');
        				document.querySelector('#app__actions .btn-load[data-action=build]').classList.remove('disabled');
        				document.querySelector('#app__actions .btn-load[data-action=delete]').classList.remove('disabled');
        			break;
        			case 'no-install': 
        				strStatus = 'not installed';
        				document.querySelector('#app__actions .btn-load[data-action=install]').classList.remove('disabled');
        				document.querySelector('#app__actions .btn-load[data-action=build]').classList.add('disabled');
        				document.querySelector('#app__actions .btn-load[data-action=delete]').classList.add('disabled');
        			break;
        		}
        		updateStatus(data.status,strStatus);


        		// REMOTE LISTS
        		document.getElementById('app__list--components').innerHTML = '';
        		for(var component in data.remote.components){
        			component = data.remote.components[component];
        			document.getElementById('app__list--components').innerHTML += `
        				<li data-component="${component.name_short}">
        					<div class="input-group">
        						<input type="checkbox" name="f_components_${component.name_short}" id="f_components_${component.name_short}" value="${component.name_short}" />
        						<label for="f_components_${component.name_short}">${component.name_short}</label>
        					</div>
        					<div class="actions">
        						<span data-action="updateComponent" data-result="false" data-icon="true" data-text=" " data-process="processAction" title="Update ${component.name_short}"><i class="fad fa-arrow-alt-to-top"></i></span>
        						<i data-action="info" class="fal fa-info-circle"></i>
								<i data-action="move" class="fad fa-list"></i>
        					</div>
        				</li>
        			`;
        		}
        		document.getElementById('app__list--themes').innerHTML = '';
        		for(var theme in data.remote.themes){
        			theme = data.remote.themes[theme];
        			document.getElementById('app__list--themes').innerHTML += `
        				<li data-theme="${theme.name_short}">
        					<div class="input-group">
	        					<input type="checkbox" name="f_themes_${theme.name_short}" id="f_themes_${theme.name_short}" value="${theme.name_short}" />
	        					<label for="f_themes_${theme.name_short}">${theme.name_short}</label>
	        				</div>
	        				<div class="actions">
        						<span data-action="updateTheme" data-result="false" data-icon="true" data-text=" " data-process="processAction" title="Update ${theme.name_short}"><i class="fad fa-arrow-alt-to-top"></i></span>
        						<i data-action="info" class="fal fa-info-circle"></i>
								<i data-action="move" class="fad fa-list"></i>
        					</div>
        				</li>
        			`;
        		}

        		// DISPLAY FRAMWAY ACTUAL CONFIG
        		if(data.status == 'ok'){
	        		document.getElementById('f_config_useFA').value = data.framway.useFA;
	        		if (data.framway.useToastr) document.getElementById('f_config_useToastr').checked = true;
	        		else document.getElementById('f_config_useToastr').checked = false;
	        		if (data.framway.debug) document.getElementById('f_config_debug').checked = true;
	        		else document.getElementById('f_config_debug').checked = false;

		        	for(var component of data.framway.components){
		        		document.querySelector('#f_components_'+component).checked = true;
		        		$('#app__list--components li[data-component='+component+']').insertBefore($('#app__list--components li[data-component]').eq(data.framway.components.indexOf(component)));
		        	}
		        	for(var theme of data.framway.themes){
		        		document.querySelector('#f_themes_'+theme).checked = true;
		        		$('#app__list--themes li[data-theme='+theme+']').insertBefore($('#app__list--themes li[data-theme]').eq(data.framway.themes.indexOf(theme)));
		        	}

	        		CONFIG = {
	        			components: data.framway.components,
	        			themes: data.framway.themes,
	        			useFA: data.framway.useFA,
	        			useToastr: data.framway.useToastr,
	        			debug: data.framway.debug,
	        		};
        		}
        		if(data.status != 'install')
        			checkConfig();

        		// confirm ended action
        		if (typeof processAction.resolve != 'undefined')
        			processAction.resolve();
        	})
		</script>
	</body>
</html>